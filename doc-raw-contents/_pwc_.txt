markdown content direct included in the page. stable heads up!!!links to other site docs must be given using the permalinks, not the file name. link to file in the same folder link to file in different folder broken link good external link broken external link. heads up!!!!- liquid tags may generate unexpected behaviour sometimes due to dry rendering during site build.- dry rendering is used in the site build process to generate related pages and keywords- it may be possible to have the front matter rendered also. using site vars from siteconfig: xxx markdown content generated from one part of another site page. welcome to the documentation site builder guide — your comprehensive resource for learning how to create, build, and maintain high-quality documentation sites for any kind of project, product, or organization. whether you’re a solo developer, technical writer, open-source contributor, startup team, or enterprise content strategist, this guide will walk you through everything you need to know about building a complete, maintainable, and professional documentation site from scratch. this guide is a step-by-step manual that explains:. how to plan, structure, and organize documentation how to choose the right tools and technologies how to build a fully functional documentation site how to style and customize your site for branding how to publish and maintain your site efficiently. this guide is suitable for:. developers who want to document apis, libraries, or frameworks product teams building internal or customer-facing documentation technical writers looking to improve structure and clarity open-source maintainers aiming to create onboarding guides educators and trainers documenting tutorials or curricula anyone who wants to build a knowledge base or help center. no prior experience with documentation systems is required — we start from the basics and build up. by the end of this guide, you will understand:. identifying your audience structuring documentation types: tutorials, references, faqs, etc. markdown best practices choosing deployment platforms (e.g., github pages, netlify). folder structures and content organization sidebar and navigation search and indexing setup. clear writing principles terminology consistency code block formatting and annotations accessibility considerations. branding your docs adding custom styles creating reusable components. continuous deployment changelogs community contributions keeping docs up to date. to follow along with this guide, you’ll need:. basic familiarity with git and github a working knowledge of markdown a development environment access to a browser and a text editor (e.g., vs code). this site is divided into logical sections, each building on the previous one:. getting started – overview, goals, and tooling setup planning your docs – audience analysis, content hierarchy, and types building the site – installing, configuring, and running your documentation framework writing great docs – tips, formatting, structure, and consistency customization – layout, themes, branding, and interactive elements deployment – hosting, ci/cd pipelines, versioning, and analytics best practices – accessibility, localization, seo, and maintenance workflows examples & templates – starter projects, reusable snippets, and content scaffolds. well-written documentation is more than just a user manual:. it helps users understand and use your product it reduces support burden and onboarding time it builds trust, credibility, and community it enables contribution and collaboration it preserves institutional knowledge. good documentation isn’t just nice to have — it’s a core part of product success. use the sidebar to navigate to the first section and begin your journey. each topic includes examples, templates, and real-world tips to help you go from blank page to beautiful docs. markdown content generated from a file from a collection. this file has its own content but loads external content too. this is a file from a collection. this file loads some external content from another repo and place it inline. link to file in different folder. markdown content generated from one part a partial which is not a site page. partial 1. i am a paragraph from a partial file under a h2 title. the h2 title will be placed in toc under the first h1 found in the document above this h2 title. i am a paragraph from a partial file under a h1 title. the h1 title will be placed on the 1st level of toc.