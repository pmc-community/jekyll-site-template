#!/bin/bash

# List of branches to build from
branches=("gh-pages" "ro")  # <- Edit this list as needed

# Load color and global variables
source tools_sh/colors.sh
source tools_sh/globals.sh

clear
echo ""
print_color "$BOLD_WHITE" "HOLD ON!!! START WORKING ..."
print_color "$BOLD_WHITE" "-------------------------------"

# Prevent running if Git is in a conflicted or interrupted state
if [ -d .git/rebase-merge ] || [ -d .git/rebase-apply ]; then
  print_color_enclosed "$RED" "‚ùå Git is currently in the middle of a rebase or merge. Please resolve it first."
  exit 1
fi

# Check for unresolved merge conflicts
if git diff --name-only --diff-filter=U | grep . >/dev/null; then
  print_color_enclosed "$RED" "‚ùå Unresolved merge conflicts detected. Please resolve them before running the script."
  git status --unmerged
  exit 1
fi

# Save the current branch to return later
current_branch=$(git rev-parse --abbrev-ref HEAD)

# Commit and push local changes if there are any
if ! git diff --quiet || ! git diff --cached --quiet; then
  print_color_enclosed "$YELLOW" "üîÑ Committing local changes on '$current_branch'..."

  git add -A
  commit_msg="auto: commit before site build script switch [$(date '+%Y-%m-%d %H:%M:%S')]"
  if git commit -m "$commit_msg"; then
    print_color "$GREEN" "‚úÖ Committed changes."
  else
    print_color "$RED" "‚ö†Ô∏è No new changes to commit."
  fi

  print_color "$BLUE" "üîº Pushing '$current_branch' to origin..."
  if git push origin "$current_branch"; then
    print_color "$GREEN" "‚úÖ Push successful."
  else
    print_color "$RED" "‚ùå Push failed. Please resolve the issue and try again."
    exit 1
  fi
else
  print_color "$BLUE" "‚úÖ No local changes to commit or push on '$current_branch'."
fi

# Loop through each branch to build
for branch in "${branches[@]}"; do
  echo ""
  print_color_enclosed "$BLUE" "Switching to branch: $branch"

  # Stash any remaining changes to avoid interference
  git stash push -u -q --keep-index

  # Try switching to branch
  if ! git checkout "$branch"; then
    print_color_enclosed "$RED" "‚ùå Failed to checkout branch: $branch ‚Äî skipping"
    git stash pop -q
    continue
  fi

  echo ""
  print_color_enclosed "$PURPLE" "PY pre-build scripts"
  pyEnable=$(grep 'pyEnable' _data/buildConfig.yml | awk '{print $2}')
  if [ "$pyEnable" = "true" ]; then
    ./tools_py/preBuild-pyScripts
  else
    echo "pyEnable is false. Skipping Python scripts."
  fi

  echo ""
  print_color_enclosed "$PURPLE" "Pre-flight check (dev only)"
  preFlight=$(grep 'preFlight' _data/buildConfig.yml | awk '{print $2}')
  if [ "$preFlight" = "true" ]; then
    ./check
  else
    echo "preFlight is false. Skipping site check."
  fi

  echo ""
  print_color_enclosed "$PURPLE" "Building site for branch: $branch"

  # Activate virtual environment (optional)
  if [ -f "$HOME/py-dev-env-392/bin/activate" ]; then
    source "$HOME/py-dev-env-392/bin/activate"
  fi

  # Clean and build the site
  bundle exec jekyll clean
  LANG="en_US.UTF-8" LC_ALL="en_US.UTF-8" bundle exec jekyll build --incremental --trace

  echo ""
  print_color_enclosed "$GREEN" "‚úÖ Build complete for branch: $branch"

  # Restore stashed changes
  git stash pop -q
done

# Return to original branch
git checkout "$current_branch"
echo ""
print_color "$BOLD_WHITE" "‚úÖ All branches built. Back on: $current_branch"
